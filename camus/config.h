#pragma once

#include <map>
#include <string>

namespace camus {
    struct config {
        std::string posts_directory;
        std::string out_directory;
        std::string filename_type;
        std::string markdown_engine;
        std::string main_title;
        std::string main_subtitle;
        std::string main_description;
        std::string home_template_file;
        std::string page_template_file;
    };

    class ini {
        std::string file_;

    public:
        config config_ = {
            .posts_directory = "posts",
            .out_directory = "html",
            .filename_type = "uuid",
            .markdown_engine = "gomarkdown",
            .main_title = "Just Another Camus blog",
            .main_subtitle = "Static blog generated by Camus",
            .main_description = "Rome was not built in one day.",
            .home_template_file = "template/home_template.html",
            .page_template_file = "template/page_template_file.html",
        };;

        static ini& get();
        static config& all();
        static void fill(std::string& data);
        static std::string make_key(const std::string& section, const std::string& key);

        std::unordered_map<std::string, std::string> parse(const std::string& name);
        void write(const std::unordered_map<std::string, std::string>& config) const;
    };
}
